[% INCLUDE header.tt %]

<div class="whm-header">
    <h1><i class="fas fa-tachometer-alt"></i> WHM Varnish Cache Manager</h1>
    <p>Real-time monitoring and management for Varnish Cache and Hitch SSL Proxy</p>
</div>

<div class="whm-navigation">
    <div class="nav-left">
        <span>Server: [% server_hostname || 'localhost' %] | Status: [% varnish_status.running ? 'Online' : 'Offline' %]</span>
    </div>
    <div class="nav-right">
        <span class="update-time">Last updated: [% current_time %]</span>
        <button class="btn" onclick="location.reload()"><i class="fas fa-sync"></i> Refresh</button>
    </div>
</div>

<style>
:root {
    --primary-color: #2271b1;
    --success-color: #00a32a;
    --warning-color: #f0b849;
    --error-color: #cc1818;
    --bg-gradient: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);
    --card-shadow: 0 2px 15px rgba(0,0,0,0.08);
    --modal-overlay: rgba(0, 0, 0, 0.5);
}

/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--modal-overlay);
    z-index: 1000;
    align-items: center;
    justify-content: center;
}

.modal.active {
    display: flex;
}

.modal-content {
    background: white;
    border-radius: 12px;
    padding: 30px;
    width: 90%;
    max-width: 800px;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 2px solid #f0f0f0;
}

.modal-header h2 {
    margin: 0;
    color: var(--primary-color);
    display: flex;
    align-items: center;
    gap: 10px;
}

.modal-close {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #666;
}

.modal-body {
    padding: 0;
}

.modal-actions {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #eee;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
}

body {
    font-family: 'Segoe UI', Arial, sans-serif;
    margin: 0;
    padding: 0;
    background: #f4f4f4;
    color: #333;
}

.whm-header {
    background: #1d2327;
    color: white;
    padding: 15px 20px;
    border-bottom: 4px solid var(--primary-color);
}

.whm-navigation {
    background: #2c3338;
    padding: 10px 20px;
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.main-content {
    padding: 20px;
    max-width: 1400px;
    margin: 0 auto;
}

.section-tabs {
    display: flex;
    gap: 2px;
    background: #e9ecef;
    padding: 2px;
    border-radius: 8px;
    margin-bottom: 20px;
}

.section-tab {
    padding: 10px 20px;
    border-radius: 6px;
    cursor: pointer;
    flex: 1;
    text-align: center;
    font-weight: 500;
    transition: all 0.2s;
    color: #666;
}

.section-tab.active {
    background: white;
    color: var(--primary-color);
}

.card {
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: var(--card-shadow);
    margin-bottom: 20px;
}

.card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 2px solid #f0f0f0;
}

.card-header h3 {
    margin: 0;
    display: flex;
    align-items: center;
    gap: 10px;
    color: var(--primary-color);
}

.refresh-time {
    color: #666;
    font-size: 0.9em;
}

/* Performance Overview Styles */
.performance-overview {
    background: var(--bg-gradient);
}

.performance-score {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 30px;
    margin: 20px 0;
}

.score-circle {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    background: conic-gradient(var(--success-color) 0% [% cache_efficiency || 85 %]%, #f0f0f0 [% cache_efficiency || 85 %]% 100%);
    color: white;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: relative;
}

.score-circle::before {
    content: '';
    position: absolute;
    width: 130px;
    height: 130px;
    background: white;
    border-radius: 50%;
    z-index: 1;
}

.score-circle .score {
    font-size: 48px;
    font-weight: bold;
    color: var(--success-color);
    position: relative;
    z-index: 2;
}

.score-circle .score-label {
    font-size: 14px;
    color: #666;
    text-align: center;
    position: relative;
    z-index: 2;
}

.score-circle .score-subtitle {
    font-size: 12px;
    color: var(--success-color);
    position: relative;
    z-index: 2;
}

.metrics-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
    margin-top: 20px;
}

.metric-card {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    cursor: pointer;
}

.metric-card:hover {
    transform: translateY(-2px);
}

.metric-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.metric-icon {
    width: 40px;
    height: 40px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 18px;
    color: white;
}

.metric-icon.cache { background: var(--success-color); }
.metric-icon.performance { background: var(--primary-color); }
.metric-icon.security { background: var(--warning-color); }
.metric-icon.system { background: #6c757d; }

.metric-value {
    font-size: 32px;
    font-weight: bold;
    margin: 10px 0;
    color: var(--primary-color);
}

.metric-label {
    font-size: 14px;
    color: #666;
    margin-bottom: 5px;
}

.metric-trend {
    font-size: 12px;
    display: flex;
    align-items: center;
    gap: 5px;
}

.trend.positive { color: var(--success-color); }
.trend.negative { color: var(--error-color); }
.trend.stable { color: #666; }

.btn {
    padding: 8px 16px;
    border-radius: 6px;
    border: none;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.2s;
    display: inline-flex;
    align-items: center;
    gap: 6px;
    text-decoration: none;
}

.btn.primary {
    background: var(--primary-color);
    color: white;
}

.btn.success {
    background: var(--success-color);
    color: white;
}

.btn.warning {
    background: var(--warning-color);
    color: white;
}

.btn.danger {
    background: var(--error-color);
    color: white;
}

.btn:hover {
    opacity: 0.9;
    transform: translateY(-1px);
}

.domain-list {
    display: grid;
    gap: 15px;
    margin-top: 20px;
}

.domain-item {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.domain-info {
    display: flex;
    align-items: center;
    gap: 15px;
}

.domain-icon {
    width: 40px;
    height: 40px;
    background: var(--primary-color);
    color: white;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.domain-status {
    display: flex;
    align-items: center;
    gap: 10px;
}

.status-badge {
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
}

.status-badge.active {
    background: #e8f5e9;
    color: var(--success-color);
}

.chart-container {
    position: relative;
    height: 300px;
    margin: 20px 0;
}

.action-buttons {
    display: flex;
    gap: 10px;
    margin: 20px 0;
    flex-wrap: wrap;
}

.settings-form {
    display: grid;
    gap: 20px;
    margin-top: 20px;
}

.form-group {
    display: grid;
    gap: 8px;
}

.form-group label {
    font-weight: 500;
    color: #333;
}

.form-group input,
.form-group select,
.form-group textarea {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
}

.form-group textarea {
    min-height: 120px;
    font-family: 'Courier New', monospace;
}

.log-container {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    max-height: 400px;
    overflow-y: auto;
    margin-top: 20px;
}

.log-entry {
    padding: 8px 12px;
    border-bottom: 1px solid #dee2e6;
    font-family: 'Courier New', monospace;
    font-size: 12px;
}

.log-entry.error { background: #fff5f5; }
.log-entry.warning { background: #fffbf0; }
.log-entry.info { background: white; }

.service-status {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin: 20px 0;
}

.service-card {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.service-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.service-name {
    font-size: 18px;
    font-weight: 600;
    color: var(--primary-color);
}

.service-badge {
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
}

.service-badge.running {
    background: #e8f5e9;
    color: var(--success-color);
}

.service-badge.stopped {
    background: #fff5f5;
    color: var(--error-color);
}

.service-details {
    display: grid;
    gap: 8px;
    font-size: 14px;
    color: #666;
}

.service-actions {
    margin-top: 15px;
    display: flex;
    gap: 10px;
}
</style>

<div class="main-content">
    <!-- Section Navigation -->
    <div class="section-tabs">
        <div class="section-tab active" data-section="overview">
            <i class="fas fa-tachometer-alt"></i> Overview
        </div>
        <div class="section-tab" data-section="domains">
            <i class="fas fa-globe"></i> Domains
        </div>
        <div class="section-tab" data-section="analytics">
            <i class="fas fa-chart-line"></i> Analytics
        </div>
        <div class="section-tab" data-section="settings">
            <i class="fas fa-cog"></i> Settings
        </div>
        <div class="section-tab" data-section="logs">
            <i class="fas fa-list-alt"></i> Logs
        </div>
    </div>

    <!-- Overview Section -->
    <div id="overview-section" class="section-content">
        <!-- Performance Overview -->
        <div class="card performance-overview">
            <div class="card-header">
                <h3><i class="fas fa-chart-pie"></i> Performance Overview</h3>
                <span class="refresh-time">Auto-refresh: 30s</span>
            </div>
            
            <div class="performance-score">
                <div class="score-circle">
                    <div class="score">[% system_stats.cache_efficiency || '85' %]</div>
                    <div class="score-label">Cache<br>Efficiency</div>
                    <div class="score-subtitle">Excellent</div>
                </div>
                
                <div class="score-details">
                    <div class="score-item good">
                        <i class="fas fa-bolt"></i>
                        <div class="score-info">
                            <span class="score-label">Hit Rate</span>
                            <span class="score-value">[% varnish_status.hit_rate || '89.2' %]%</span>
                            <span class="score-detail">Last 24 hours</span>
                        </div>
                        <span class="trend positive"><i class="fas fa-arrow-up"></i> +2.1%</span>
                    </div>
                    
                    <div class="score-item good">
                        <i class="fas fa-clock"></i>
                        <div class="score-info">
                            <span class="score-label">Avg Response Time</span>
                            <span class="score-value">[% varnish_status.response_time || '0.08' %]s</span>
                            <span class="score-detail">95th percentile: 0.15s</span>
                        </div>
                        <span class="trend positive"><i class="fas fa-arrow-down"></i> -12ms</span>
                    </div>
                    
                    <div class="score-item good">
                        <i class="fas fa-shield-alt"></i>
                        <div class="score-info">
                            <span class="score-label">SSL Status</span>
                            <span class="score-value">[% hitch_status.running ? 'Active' : 'Inactive' %]</span>
                            <span class="score-detail">[% hitch_status.certificate_count || '0' %] certificates loaded</span>
                        </div>
                        <span class="trend stable"><i class="fas fa-minus"></i> Stable</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Service Status -->
        <div class="card">
            <div class="card-header">
                <h3><i class="fas fa-server"></i> Service Status</h3>
                <button class="btn primary" onclick="checkAllServices()">
                    <i class="fas fa-sync"></i> Check All
                </button>
            </div>
            
            <div class="service-status">
                <div class="service-card">
                    <div class="service-header">
                        <div class="service-name">Varnish Cache</div>
                        <div class="service-badge [% varnish_status.running ? 'running' : 'stopped' %]">
                            [% varnish_status.running ? 'Running' : 'Stopped' %]
                        </div>
                    </div>
                    <div class="service-details">
                        <div>Version: [% varnish_status.version || 'Unknown' %]</div>
                        <div>Uptime: [% varnish_status.uptime_formatted || '0d 0h 0m' %]</div>
                        <div>Port: [% varnish_config.port || '80' %]</div>
                        <div>Memory: [% varnish_config.memory || '256MB' %] allocated</div>
                    </div>
                    <div class="service-actions">
                        <button class="btn success" onclick="restartService('varnish')">
                            <i class="fas fa-redo"></i> Restart
                        </button>
                        <button class="btn" onclick="viewServiceLogs('varnish')">
                            <i class="fas fa-file-alt"></i> Logs
                        </button>
                    </div>
                </div>
                
                <div class="service-card">
                    <div class="service-header">
                        <div class="service-name">Hitch SSL Proxy</div>
                        <div class="service-badge [% hitch_status.running ? 'running' : 'stopped' %]">
                            [% hitch_status.running ? 'Running' : 'Stopped' %]
                        </div>
                    </div>
                    <div class="service-details">
                        <div>Version: [% hitch_status.version || 'Unknown' %]</div>
                        <div>Uptime: [% hitch_status.uptime_formatted || '0d 0h 0m' %]</div>
                        <div>Frontend: *:[% hitch_config.frontend_port || '443' %]</div>
                        <div>Backend: [% hitch_config.backend || '127.0.0.1:4443' %]</div>
                    </div>
                    <div class="service-actions">
                        <button class="btn success" onclick="restartService('hitch')">
                            <i class="fas fa-redo"></i> Restart
                        </button>
                        <button class="btn" onclick="viewServiceLogs('hitch')">
                            <i class="fas fa-file-alt"></i> Logs
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Live Metrics -->
        <div class="card">
            <div class="card-header">
                <h3><i class="fas fa-chart-line"></i> Live Metrics</h3>
                <div class="metric-controls">
                    <select id="timeframe" onchange="updateMetrics()">
                        <option value="1h">Last Hour</option>
                        <option value="6h">Last 6 Hours</option>
                        <option value="24h">Last 24 Hours</option>
                        <option value="7d">Last 7 Days</option>
                    </select>
                </div>
            </div>
            
            <div class="metrics-grid">
                <!-- Cache Performance -->
                <div class="metric-card">
                    <div class="metric-header">
                        <div class="metric-icon cache">
                            <i class="fas fa-database"></i>
                        </div>
                        <div class="metric-trend">
                            <span class="trend positive">
                                <i class="fas fa-arrow-up"></i> +2.3%
                            </span>
                        </div>
                    </div>
                    <div class="metric-label">Cache Hit Rate</div>
                    <div class="metric-value cache-hit-rate">[% system_stats.cache_hits || '89.2' %]%</div>
                    <div class="metric-trend">
                        <span>Hits: [% system_stats.total_hits || '24,891' %] | Misses: [% system_stats.total_misses || '2,847' %]</span>
                    </div>
                </div>

                <!-- Response Time -->
                <div class="metric-card">
                    <div class="metric-header">
                        <div class="metric-icon performance">
                            <i class="fas fa-tachometer-alt"></i>
                        </div>
                        <div class="metric-trend">
                            <span class="trend positive">
                                <i class="fas fa-arrow-down"></i> -15ms
                            </span>
                        </div>
                    </div>
                    <div class="metric-label">Avg Response Time</div>
                    <div class="metric-value response-time">[% system_stats.avg_response_time || '0.08' %]s</div>
                    <div class="metric-trend">
                        <span>P95: [% system_stats.p95_response_time || '0.15' %]s | P99: [% system_stats.p99_response_time || '0.28' %]s</span>
                    </div>
                </div>

                <!-- Requests per Second -->
                <div class="metric-card">
                    <div class="metric-header">
                        <div class="metric-icon system">
                            <i class="fas fa-exchange-alt"></i>
                        </div>
                        <div class="metric-trend">
                            <span class="trend stable">
                                <i class="fas fa-minus"></i> Stable
                            </span>
                        </div>
                    </div>
                    <div class="metric-label">Requests/sec</div>
                    <div class="metric-value requests-per-sec">[% system_stats.requests_per_sec || '156' %]</div>
                    <div class="metric-trend">
                        <span>Peak: [% system_stats.peak_rps || '289' %]/s | Total: [% system_stats.total_requests || '1.2M' %]</span>
                    </div>
                </div>

                <!-- Memory Usage -->
                <div class="metric-card">
                    <div class="metric-header">
                        <div class="metric-icon system">
                            <i class="fas fa-memory"></i>
                        </div>
                        <div class="metric-trend">
                            <span class="trend stable">
                                <i class="fas fa-minus"></i> Stable
                            </span>
                        </div>
                    </div>
                    <div class="metric-label">Memory Usage</div>
                    <div class="metric-value memory-usage">[% system_stats.memory_usage || '68' %]%</div>
                    <div class="metric-trend">
                        <span>Used: [% system_stats.memory_used || '174' %]MB | Free: [% system_stats.memory_free || '82' %]MB</span>
                    </div>
                </div>

                <!-- Bandwidth Saved -->
                <div class="metric-card">
                    <div class="metric-header">
                        <div class="metric-icon success">
                            <i class="fas fa-save"></i>
                        </div>
                        <div class="metric-trend">
                            <span class="trend positive">
                                <i class="fas fa-arrow-up"></i> +8.2%
                            </span>
                        </div>
                    </div>
                    <div class="metric-label">Bandwidth Saved</div>
                    <div class="metric-value bandwidth-saved">[% system_stats.bandwidth_saved || '2.3' %]GB</div>
                    <div class="metric-trend">
                        <span>Today: [% system_stats.bandwidth_saved_today || '89' %]MB | This week: [% system_stats.bandwidth_saved_week || '12.7' %]GB</span>
                    </div>
                </div>

                <!-- SSL Connections -->
                <div class="metric-card">
                    <div class="metric-header">
                        <div class="metric-icon security">
                            <i class="fas fa-lock"></i>
                        </div>
                        <div class="metric-trend">
                            <span class="trend positive">
                                <i class="fas fa-arrow-up"></i> +12.4%
                            </span>
                        </div>
                    </div>
                    <div class="metric-label">SSL Connections</div>
                    <div class="metric-value ssl-connections">[% hitch_status.active_connections || '42' %]</div>
                    <div class="metric-trend">
                        <span>Handshakes: [% hitch_status.ssl_handshakes || '1,247' %] | Errors: [% hitch_status.ssl_errors || '0' %]</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="card">
            <div class="card-header">
                <h3><i class="fas fa-bolt"></i> Quick Actions</h3>
            </div>
            
            <div class="action-buttons">
                <button class="btn danger" onclick="showPurgeModal('all')">
                    <i class="fas fa-trash"></i> Purge All Cache
                </button>
                <button class="btn warning" onclick="showPurgeModal('selective')">
                    <i class="fas fa-filter"></i> Selective Purge
                </button>
                <button class="btn success" onclick="optimizeCache()">
                    <i class="fas fa-magic"></i> Optimize Cache
                </button>
                <button class="btn primary" onclick="generateReport()">
                    <i class="fas fa-file-download"></i> Generate Report
                </button>
                <button class="btn" onclick="showInstallModal()">
                    <i class="fas fa-download"></i> Install/Update
                </button>
            </div>
        </div>
    </div>

    <!-- Other sections would go here -->
    [% PROCESS sections.tt %]
</div>

<!-- Purge Cache Modal -->
<div id="purgeModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2><i class="fas fa-trash"></i> Purge Cache</h2>
            <button class="modal-close" onclick="closeModal('purgeModal')">&times;</button>
        </div>
        <div class="modal-body">
            <div class="warning-message">
                <h3><i class="fas fa-exclamation-triangle"></i> Warning</h3>
                <p>This action will clear cached content and may temporarily impact website performance.</p>
            </div>
            
            <div class="purge-details">
                <div class="form-group">
                    <label>Purge Type:</label>
                    <select id="purgeType" onchange="updatePurgeOptions()">
                        <option value="all">All Cache</option>
                        <option value="domain">Specific Domain</option>
                        <option value="url">Specific URL</option>
                        <option value="pattern">URL Pattern</option>
                    </select>
                </div>
                
                <div id="purgeOptions" style="display: none;">
                    <div class="form-group">
                        <label id="purgeInputLabel">Target:</label>
                        <input type="text" id="purgeTarget" placeholder="Enter domain, URL, or pattern">
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-actions">
            <button class="btn" onclick="closeModal('purgeModal')">Cancel</button>
            <button class="btn danger" onclick="executePurge()">
                <i class="fas fa-trash"></i> Purge Cache
            </button>
        </div>
    </div>
</div>

<!-- Installation Modal -->
<div id="installModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2><i class="fas fa-download"></i> Install/Update Varnish & Hitch</h2>
            <button class="modal-close" onclick="closeModal('installModal')">&times;</button>
        </div>
        <div class="modal-body">
            <div id="installProgress" style="display: none;">
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <div id="installStatus">Preparing installation...</div>
            </div>
            
            <div id="installOptions">
                <div class="form-group">
                    <label>Installation Type:</label>
                    <select id="installType">
                        <option value="full">Full Installation (Varnish + Hitch + Configuration)</option>
                        <option value="varnish">Varnish Only</option>
                        <option value="hitch">Hitch Only</option>
                        <option value="update">Update Existing Installation</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label>Apache Port Configuration:</label>
                    <input type="text" id="apachePort" value="8080" placeholder="8080">
                    <small>Apache will be moved to this port (default: 8080)</small>
                </div>
                
                <div class="form-group">
                    <label>Apache SSL Port:</label>
                    <input type="text" id="apacheSSLPort" value="8443" placeholder="8443">
                    <small>Apache SSL will be moved to this port (default: 8443)</small>
                </div>
                
                <div class="warning-message">
                    <h3><i class="fas fa-exclamation-triangle"></i> Important Notice</h3>
                    <p>This installation will temporarily make websites inaccessible. Please ensure you have:</p>
                    <ul>
                        <li>Recent backups of your server configuration</li>
                        <li>Scheduled this during a maintenance window</li>
                        <li>Notified users of potential downtime</li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="modal-actions">
            <button class="btn" onclick="closeModal('installModal')">Cancel</button>
            <button class="btn warning" onclick="startInstallation()">
                <i class="fas fa-download"></i> Start Installation
            </button>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
// Dashboard functionality
class VarnishDashboard {
    constructor() {
        this.currentSection = 'overview';
        this.currentTimeframe = '1h';
        this.charts = {};
        this.refreshInterval = null;
        
        this.init();
    }
    
    init() {
        this.bindEvents();
        this.initCharts();
        this.startAutoRefresh();
        this.updateTime();
        setInterval(() => this.updateTime(), 60000);
    }
    
    bindEvents() {
        // Section tabs
        document.querySelectorAll('.section-tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                const section = e.currentTarget.dataset.section;
                this.switchSection(section);
            });
        });
        
        // Timeframe selector
        const timeframe = document.getElementById('timeframe');
        if (timeframe) {
            timeframe.addEventListener('change', (e) => {
                this.currentTimeframe = e.target.value;
                this.fetchAnalytics();
            });
        }
    }
    
    switchSection(section) {
        // Update tab states
        document.querySelectorAll('.section-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        document.querySelector(`[data-section="${section}"]`).classList.add('active');
        
        // Show/hide content
        document.querySelectorAll('.section-content').forEach(content => {
            content.style.display = 'none';
        });
        
        const sectionElement = document.getElementById(`${section}-section`);
        if (sectionElement) {
            sectionElement.style.display = 'block';
        }
        
        this.currentSection = section;
        this.updateContent(section);
    }
    
    initCharts() {
        // Initialize Chart.js charts for analytics
        // This would be expanded based on the analytics section
    }
    
    startAutoRefresh() {
        this.refreshInterval = setInterval(() => {
            this.updateMetrics();
        }, 30000); // Refresh every 30 seconds
    }
    
    async updateMetrics() {
        try {
            const response = await fetch(`varnish_manager.cgi?action=ajax&ajax_action=getStats&csrf_token=[% csrf_token %]`);
            const data = await response.json();
            
            if (data.success) {
                this.updateLiveMetrics(data.data);
            }
        } catch (error) {
            console.error('Error updating metrics:', error);
        }
    }
    
    updateLiveMetrics(data) {
        // Update cache hit rate
        const hitRateElement = document.querySelector('.cache-hit-rate');
        if (hitRateElement && data.varnish && data.varnish.cache_hit_rate) {
            hitRateElement.textContent = data.varnish.cache_hit_rate.toFixed(1) + '%';
        }
        
        // Update response time
        const responseTimeElement = document.querySelector('.response-time');
        if (responseTimeElement && data.varnish && data.varnish.average_response_time) {
            responseTimeElement.textContent = (data.varnish.average_response_time / 1000).toFixed(2) + 's';
        }
        
        // Update requests per second
        const rpsElement = document.querySelector('.requests-per-sec');
        if (rpsElement && data.varnish && data.varnish.requests_per_second) {
            rpsElement.textContent = Math.round(data.varnish.requests_per_second);
        }
        
        // Update memory usage
        const memoryElement = document.querySelector('.memory-usage');
        if (memoryElement && data.varnish && data.varnish.memory_usage_percentage) {
            memoryElement.textContent = Math.round(data.varnish.memory_usage_percentage) + '%';
        }
        
        // Update SSL connections
        const sslElement = document.querySelector('.ssl-connections');
        if (sslElement && data.hitch && data.hitch.active_connections) {
            sslElement.textContent = data.hitch.active_connections;
        }
    }
    
    updateTime() {
        const now = new Date();
        const timeElements = document.querySelectorAll('.update-time');
        timeElements.forEach(element => {
            element.textContent = `Last updated: ${now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
        });
    }
    
    async updateContent(section) {
        // Load section-specific content
        switch(section) {
            case 'overview':
                await this.updateMetrics();
                break;
            case 'domains':
                await this.loadDomains();
                break;
            case 'analytics':
                await this.loadAnalytics();
                break;
            case 'settings':
                await this.loadSettings();
                break;
            case 'logs':
                await this.loadLogs();
                break;
        }
    }
    
    async loadDomains() {
        // Implementation for loading domain statistics
    }
    
    async loadAnalytics() {
        // Implementation for loading analytics data
    }
    
    async loadSettings() {
        // Implementation for loading settings
    }
    
    async loadLogs() {
        // Implementation for loading logs
    }
}

// Utility functions
function showModal(modalId) {
    document.getElementById(modalId).classList.add('active');
}

function closeModal(modalId) {
    document.getElementById(modalId).classList.remove('active');
}

function showPurgeModal(type) {
    document.getElementById('purgeType').value = type;
    updatePurgeOptions();
    showModal('purgeModal');
}

function updatePurgeOptions() {
    const purgeType = document.getElementById('purgeType').value;
    const purgeOptions = document.getElementById('purgeOptions');
    const purgeTarget = document.getElementById('purgeTarget');
    const purgeInputLabel = document.getElementById('purgeInputLabel');
    
    if (purgeType === 'all') {
        purgeOptions.style.display = 'none';
    } else {
        purgeOptions.style.display = 'block';
        
        switch(purgeType) {
            case 'domain':
                purgeInputLabel.textContent = 'Domain:';
                purgeTarget.placeholder = 'example.com';
                break;
            case 'url':
                purgeInputLabel.textContent = 'URL:';
                purgeTarget.placeholder = 'https://example.com/path/to/page';
                break;
            case 'pattern':
                purgeInputLabel.textContent = 'Pattern:';
                purgeTarget.placeholder = '/images/*.jpg';
                break;
        }
    }
}

async function executePurge() {
    const purgeType = document.getElementById('purgeType').value;
    const purgeTarget = document.getElementById('purgeTarget').value;
    
    let endpoint = 'purgeAll';
    let params = new URLSearchParams({
        action: 'ajax',
        ajax_action: endpoint,
        csrf_token: '[% csrf_token %]'
    });
    
    if (purgeType !== 'all') {
        endpoint = 'purgeCache';
        params.set('ajax_action', endpoint);
        
        if (purgeType === 'domain') {
            params.set('domain', purgeTarget);
        } else if (purgeType === 'url') {
            params.set('domain', new URL(purgeTarget).hostname);
            params.set('path', new URL(purgeTarget).pathname);
        } else if (purgeType === 'pattern') {
            params.set('pattern', purgeTarget);
        }
    }
    
    try {
        const response = await fetch('varnish_manager.cgi', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: params.toString()
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert(`Cache purged successfully! ${result.purged_count || 0} items removed.`);
            closeModal('purgeModal');
            dashboard.updateMetrics(); // Refresh metrics
        } else {
            alert(`Failed to purge cache: ${result.message || 'Unknown error'}`);
        }
    } catch (error) {
        alert('Error purging cache: ' + error.message);
    }
}

function showInstallModal() {
    showModal('installModal');
}

async function startInstallation() {
    const installType = document.getElementById('installType').value;
    const apachePort = document.getElementById('apachePort').value;
    const apacheSSLPort = document.getElementById('apacheSSLPort').value;
    
    // Show progress
    document.getElementById('installOptions').style.display = 'none';
    document.getElementById('installProgress').style.display = 'block';
    
    const params = new URLSearchParams({
        action: 'install',
        install_type: installType,
        apache_port: apachePort,
        apache_ssl_port: apacheSSLPort,
        csrf_token: '[% csrf_token %]'
    });
    
    try {
        const response = await fetch('varnish_manager.cgi', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: params.toString()
        });
        
        const result = await response.json();
        
        if (result.success) {
            document.getElementById('installStatus').textContent = 'Installation completed successfully!';
            setTimeout(() => {
                closeModal('installModal');
                location.reload(); // Refresh page to show new status
            }, 2000);
        } else {
            document.getElementById('installStatus').textContent = `Installation failed: ${result.error}`;
        }
    } catch (error) {
        document.getElementById('installStatus').textContent = 'Installation error: ' + error.message;
    }
}

async function restartService(service) {
    if (!confirm(`Are you sure you want to restart ${service}? This may cause brief downtime.`)) {
        return;
    }
    
    const endpoint = service === 'varnish' ? 'restartVarnish' : 'restartHitch';
    
    try {
        const response = await fetch(`varnish_manager.cgi?action=ajax&ajax_action=${endpoint}&csrf_token=[% csrf_token %]`);
        const result = await response.json();
        
        if (result.success) {
            alert(`${service} restarted successfully!`);
            setTimeout(() => location.reload(), 1000);
        } else {
            alert(`Failed to restart ${service}: ${result.message}`);
        }
    } catch (error) {
        alert(`Error restarting ${service}: ` + error.message);
    }
}

async function checkAllServices() {
    // Refresh service status
    location.reload();
}

function viewServiceLogs(service) {
    // Switch to logs section and filter by service
    dashboard.switchSection('logs');
    // Implementation would filter logs by service
}

async function optimizeCache() {
    // Implementation for cache optimization
    alert('Cache optimization feature coming soon!');
}

async function generateReport() {
    // Implementation for report generation
    alert('Report generation feature coming soon!');
}

// Initialize dashboard
const dashboard = new VarnishDashboard();
</script>

[% INCLUDE footer.tt %]